
#import "libc/mem.kai" _

set :: fn(data: rawptr, value: u8, len: u64) -> rawptr {
    memset(data, value, len, 1, false)
    return data
}

zero :: fn(data: rawptr, value: u8, len: u64) -> rawptr {
    memset(data, 0, len, 1, false)
}

copy :: fn(dst, src: rawptr, len: u64) -> rawptr {
    if src == nil return dst
    memmove(dst, src, len, 1, false)
    return dst
}

copyNonOverlapping :: fn(dst, src: rawptr, len: u64) -> rawptr {
    if src == nil return dst
    memcpy(dst, src, len, 1, false)
    return dst
}

compare :: fn(a, b: *u8, n: i64) -> i64 {
    for i := 0; i < n; i += 1 {
        if      a[i] < b[i] return -1
        else if a[i] > b[i] return +1
    }
    return 0
}
